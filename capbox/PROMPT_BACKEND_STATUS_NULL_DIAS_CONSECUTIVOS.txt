üö® ERROR ESPEC√çFICO: STATUS NULL EN DIAS_CONSECUTIVOS

üìã PROBLEMA IDENTIFICADO:
El campo `status` dentro de `dias_consecutivos` est√° devolviendo `null`, causando error de tipo en el frontend.

üîç LOGS DEL ERROR:
‚úÖ ATTENDANCE: Racha obtenida
üî• ATTENDANCE: Racha actual: 0
üìä ATTENDANCE: Datos completos del backend: {
  "usuario_id": "dd1ace33-8d27-4063-8c65-37b3dcff4feb",
  "racha_actual": 0,
  "estado": "activo",
  "ultima_actualizacion": "2025-07-30T08:11:17.138Z",
  "record_personal": 0,
  "dias_consecutivos": [
    {"fecha": "2025-07-30", "status": "presente"},
    {"fecha": "2025-07-29", "status": "presente"},
    {"fecha": "2025-07-28", "status": "presente"},
    {"fecha": "2025-07-27", "status": null},  // ‚Üê AQU√ç EST√Å EL PROBLEMA
    {"fecha": "2025-07-26", "status": null},
    {"fecha": "2025-07-25", "status": null},
    {"fecha": "2025-07-24", "status": null}
  ]
}
‚ùå ATTENDANCE: Error obteniendo racha - TypeError: null: type 'Null' is not a subtype of type 'String'

üéØ CAUSA RA√çZ:
El backend est√° devolviendo `status: null` en algunos d√≠as de `dias_consecutivos`, pero el frontend espera un `String` para el campo `status`.

üîß SOLUCI√ìN REQUERIDA EN BACKEND:

**1. Validar campo status en dias_consecutivos:**
```typescript
// Validar cada elemento de dias_consecutivos
response.dias_consecutivos = response.dias_consecutivos.map((dia, index) => {
  // Corregir status null
  if (dia.status === null || dia.status === undefined) {
    dia.status = 'falto'; // Valor por defecto cuando no hay asistencia registrada
    this.logger.warn(`dias_consecutivos[${index}].status era null, asignando "falto"`);
  }
  
  // Corregir fecha null (si aplica)
  if (!dia.fecha || dia.fecha === null) {
    const fechaDefault = new Date();
    fechaDefault.setDate(fechaDefault.getDate() - index);
    dia.fecha = fechaDefault.toISOString().split('T')[0];
    this.logger.warn(`dias_consecutivos[${index}].fecha era null, asignando fecha por defecto`);
  }
  
  return dia;
});
```

**2. Funci√≥n espec√≠fica para validar dias_consecutivos:**
```typescript
private validateDiasConsecutivos(diasConsecutivos: any[]): any[] {
  return diasConsecutivos.map((dia, index) => {
    const diaValidado = { ...dia };
    
    // Validar status
    if (diaValidado.status === null || diaValidado.status === undefined) {
      diaValidado.status = 'falto';
      this.logger.warn(`dias_consecutivos[${index}].status era null, asignando "falto"`);
    }
    
    // Validar fecha
    if (!diaValidado.fecha || diaValidado.fecha === null) {
      const fechaDefault = new Date();
      fechaDefault.setDate(fechaDefault.getDate() - index);
      diaValidado.fecha = fechaDefault.toISOString().split('T')[0];
      this.logger.warn(`dias_consecutivos[${index}].fecha era null, asignando fecha por defecto`);
    }
    
    return diaValidado;
  });
}
```

**3. Aplicar validaci√≥n en el servicio:**
```typescript
// En ConsultarRachaService
const racha = await this.rachaRepositorio.encontrarPorUsuarioId(userId);

if (racha) {
  // Validar dias_consecutivos antes de devolver
  racha.diasConsecutivos = this.validateDiasConsecutivos(racha.diasConsecutivos);
  
  return this.mapearADominio(racha);
} else {
  // Crear racha por defecto con dias_consecutivos v√°lidos
  const rachaDefault = this.createDefaultRacha(userId);
  rachaDefault.dias_consecutivos = this.validateDiasConsecutivos(rachaDefault.dias_consecutivos);
  
  return rachaDefault;
}
```

**4. Valores por defecto para status:**
- `null` ‚Üí `"falto"` (cuando no hay asistencia registrada)
- `undefined` ‚Üí `"falto"`
- `""` ‚Üí `"falto"`

‚ö†Ô∏è URGENCIA: ALTA
Este error impide que la funcionalidad de asistencia funcione correctamente.

üéØ RESULTADO ESPERADO:
- Ning√∫n campo `status` en `dias_consecutivos` sea null
- Todos los campos `status` tengan valores v√°lidos: "presente", "falto", "permiso"
- No m√°s errores de tipo TypeError en el frontend

üì± FRONTEND:
El frontend espera que el campo `status` sea siempre un string v√°lido. El backend debe corregir esto. 