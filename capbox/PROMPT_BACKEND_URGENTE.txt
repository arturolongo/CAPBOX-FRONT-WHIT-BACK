üö® PROMPT URGENTE PARA BACKEND
================================

üìã PROBLEMA CR√çTICO IDENTIFICADO
================================

El backend est√° aprobando exitosamente al atleta, pero NO est√° eliminando la solicitud pendiente de la base de datos.

üìä EVIDENCIA CONFIRMADA
=======================

‚úÖ APROBACI√ìN EXITOSA:
```
‚úÖ API: Atleta aprobado exitosamente
‚úÖ GYM: Atleta aprobado exitosamente con datos completos
```

‚ùå PROBLEMA CONFIRMADO:
```
üìä APROBACI√ìN: Solicitudes pendientes despu√©s de aprobaci√≥n: 1
üìã APROBACI√ìN: Solicitud pendiente - Arturo Atleton (0853a643-128e-4695-aa3e-b213d95705fe)
```

üîç DIAGN√ìSTICO T√âCNICO
=======================

1. **FLUJO ACTUAL**:
   - Coach aprueba atleta ‚Üí ‚úÖ Backend aprueba exitosamente
   - Frontend actualiza cubit ‚Üí ‚úÖ Cubit se actualiza
   - Frontend consulta solicitudes pendientes ‚Üí ‚ùå **Solicitud sigue apareciendo**

2. **PROBLEMA IDENTIFICADO**:
   - El backend aprueba al atleta correctamente
   - **PERO NO ELIMINA LA SOLICITUD PENDIENTE** de la base de datos
   - El endpoint `/identity/v1/requests/pending` sigue devolviendo la solicitud

3. **CAUSA RA√çZ**:
   - La transacci√≥n de aprobaci√≥n no incluye la eliminaci√≥n de la solicitud
   - O la eliminaci√≥n falla silenciosamente
   - O hay un problema de timing en la base de datos

üöÄ SOLUCI√ìN REQUERIDA EN BACKEND
=================================

1. **VERIFICAR ELIMINACI√ìN DE SOLICITUD**:
   ```sql
   -- Despu√©s de aprobar atleta, verificar que la solicitud se elimine
   SELECT * FROM solicitudes_aprobacion 
   WHERE atleta_id = '0853a643-128e-4695-aa3e-b213d95705fe';
   ```

2. **AGREGAR LOGS DETALLADOS**:
   ```javascript
   // En el endpoint de aprobaci√≥n
   console.log('‚úÖ Atleta aprobado:', atletaId);
   console.log('üóëÔ∏è Eliminando solicitud pendiente...');
   console.log('‚úÖ Solicitud eliminada:', solicitudId);
   ```

3. **VERIFICAR TRANSACCI√ìN**:
   ```javascript
   // Asegurar que todo se ejecute en una transacci√≥n
   await db.transaction(async (trx) => {
     await aprobarAtleta(trx, atletaId, datos);
     await eliminarSolicitud(trx, atletaId);
     await actualizarEstadoAtleta(trx, atletaId, 'activo');
   });
   ```

4. **AGREGAR VERIFICACI√ìN POST-APROBACI√ìN**:
   ```javascript
   // Despu√©s de aprobar, verificar que todo est√© correcto
   const solicitudExiste = await verificarSolicitud(atletaId);
   const estadoAtleta = await obtenerEstadoAtleta(atletaId);
   
   console.log('Verificaci√≥n post-aprobaci√≥n:');
   console.log('- Solicitud existe:', solicitudExiste);
   console.log('- Estado atleta:', estadoAtleta);
   ```

‚ö†Ô∏è ACCIONES INMEDIATAS REQUERIDAS
==================================

1. **REVISAR LOGS DEL BACKEND**:
   - Buscar logs del endpoint de aprobaci√≥n
   - Identificar si la eliminaci√≥n de solicitud se ejecuta
   - Verificar si hay errores silenciosos

2. **VERIFICAR DATOS MANUALMENTE**:
   - Coach ID: 67b4f65b-7355-4091-9d51-75fff2fb8ea8
   - Atleta ID: 0853a643-128e-4695-aa3e-b213d95705fe
   - Verificar estado de ambos usuarios

3. **PROBAR ENDPOINT DIRECTAMENTE**:
   ```bash
   curl -X POST \
     https://api.capbox.site/identity/v1/atletas/0853a643-128e-4695-aa3e-b213d95705fe/aprobar \
     -H "Authorization: Bearer [TOKEN]" \
     -H "Content-Type: application/json" \
     -d '{
       "nivel": "principiante",
       "alturaCm": 150,
       "pesoKg": 80,
       "guardia": "orthodox",
       "alergias": "DD",
       "contactoEmergenciaNombre": "Papa",
       "contactoEmergenciaTelefono": "9612878031"
     }'
   ```

4. **VERIFICAR SOLICITUDES PENDIENTES**:
   ```bash
   curl -X GET \
     https://api.capbox.site/identity/v1/requests/pending \
     -H "Authorization: Bearer [TOKEN]"
   ```

üéØ RESULTADO ESPERADO
======================

Despu√©s de la correcci√≥n del backend:

1. **Solicitudes pendientes**: Deber√≠a ser 0 (o no incluir al atleta aprobado)
2. **Estado del atleta**: Deber√≠a cambiar a "activo"
3. **Home del boxeador**: Deber√≠a mostrar contenido activo en lugar de "pendiente_datos"

üìù INSTRUCCIONES CLARAS
========================

**BACKEND DEBE**:
1. ‚úÖ Aprobar al atleta (ya funciona)
2. ‚ùå **ELIMINAR LA SOLICITUD PENDIENTE** (no funciona)
3. ‚úÖ Actualizar estado del atleta a "activo"
4. ‚úÖ Asegurar que todo se ejecute en una transacci√≥n

**FRONTEND YA EST√Å**:
1. ‚úÖ Simplificado y funcionando correctamente
2. ‚úÖ Actualizando el cubit despu√©s de aprobaci√≥n
3. ‚úÖ Limpiando cache global
4. ‚úÖ Mostrando mensajes de √©xito

‚ö†Ô∏è URGENTE
===========

El problema est√° 100% en el backend. El frontend est√° funcionando correctamente.
El backend debe corregir la eliminaci√≥n de solicitudes pendientes despu√©s de la aprobaci√≥n.

---
**√öltima actualizaci√≥n**: Enero 2025
**Estado**: URGENTE - Backend requiere correcci√≥n inmediata 