# INSTRUCCIONES BACKEND - RESOLVER ERROR 400 POST /planning/v1/routines

## üö® SITUACI√ìN ACTUAL
- ‚ùå Error 400 Bad Request persiste en POST https://api.capbox.site/planning/v1/routines
- ‚ùå Frontend env√≠a datos correctos pero backend los rechaza
- ‚ùå Headers v√°lidos: content-type: application/json, Authorization: Bearer
- ‚ùå Token JWT v√°lido y no expirado

## üìã DATOS QUE ENV√çA EL FRONTEND (CORRECTOS)
```json
{
  "nombre": "Normalona",
  "nivel": "Principiante",
  "sportId": "1",
  "descripcion": "ni una",
  "ejercicios": [
    {
      "id": "sentadilla_1234567890",
      "nombre": "Sentadilla",
      "descripcion": null,
      "setsReps": "3 x 90",
      "duracionEstimadaSegundos": 900,
      "categoria": "calentamiento"
    }
  ]
}
```

## üîç ACCIONES REQUERIDAS DEL BACKEND

### 1. VERIFICAR LOGS DEL SERVIDOR
```bash
# Revisar logs espec√≠ficos del Planning Service
grep "POST /planning/v1/routines" /var/log/planning-service.log
grep "400" /var/log/planning-service.log

# Verificar si hay errores de validaci√≥n
grep "validation" /var/log/planning-service.log
grep "error" /var/log/planning-service.log
```

### 2. VERIFICAR ESTADO DEL ENDPOINT
```bash
# Probar endpoint manualmente
curl -X POST https://api.capbox.site/planning/v1/routines \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer [TOKEN_V√ÅLIDO]" \
  -d '{
    "nombre": "Test",
    "nivel": "Principiante",
    "sportId": "1",
    "descripcion": "Test",
    "ejercicios": [
      {
        "id": "test_123",
        "nombre": "Test Exercise",
        "descripcion": null,
        "setsReps": "3x10",
        "duracionEstimadaSegundos": 300,
        "categoria": "calentamiento"
      }
    ]
  }'
```

### 3. VALIDAR CONFIGURACI√ìN
- ‚úÖ Verificar que el Planning Service est√© ejecut√°ndose
- ‚úÖ Confirmar que acepta Content-Type: application/json
- ‚úÖ Validar que el endpoint POST /planning/v1/routines existe
- ‚úÖ Revisar que las validaciones del DTO coincidan con los datos enviados

### 4. CAMPOS CR√çTICOS A VERIFICAR
1. **sportId**: Frontend env√≠a STRING "1", backend debe aceptar string y convertir a int
2. **categoria**: Debe aceptar valores "calentamiento", "resistencia", "tecnica"
3. **descripcion**: Debe aceptar string opcional
4. **ejercicios[].id**: Debe aceptar IDs personalizados del frontend
5. **ejercicios[].nombre**: Campo requerido en la estructura
6. **ejercicios[].duracionEstimadaSegundos**: Debe aceptar n√∫meros enteros

### 5. POSIBLES CAUSAS DEL ERROR 400
1. DTO de validaci√≥n no coincide con estructura enviada
2. Campo "categoria" no existe en el modelo Exercise
3. Campo "descripcion" no existe en el modelo Routine
4. Validaci√≥n de sportId espera int pero recibe string
5. Base de datos no tiene el schema actualizado
6. Servicio no est√° corriendo o est√° en estado de error

### 6. ESTRUCTURA DTO REQUERIDA
```typescript
// CrearRutinaDto
export class CrearRutinaDto {
  nombre: string;           // ‚úÖ REQUERIDO
  nivel: string;            // ‚úÖ REQUERIDO: "Principiante" | "Intermedio" | "Avanzado"
  sportId: string;          // ‚úÖ IMPORTANTE: Debe aceptar STRING, no int
  descripcion?: string;     // ‚úÖ OPCIONAL: Campo faltante en backend?
  ejercicios: EjercicioDto[]; // ‚úÖ REQUERIDO
}

// EjercicioDto
export class EjercicioDto {
  id: string;                      // ‚úÖ IMPORTANTE: IDs personalizados del frontend
  nombre: string;                  // ‚úÖ REQUERIDO: Campo faltante en backend?
  descripcion?: string;            // ‚úÖ OPCIONAL
  setsReps: string;               // ‚úÖ REQUERIDO
  duracionEstimadaSegundos: number; // ‚úÖ REQUERIDO: Campo faltante en backend?
  categoria: string;               // ‚úÖ CR√çTICO: Campo faltante en backend?
}
```

### 7. VERIFICACIONES DE BASE DE DATOS
```sql
-- Verificar que existe la tabla exercises con campo categoria
DESCRIBE exercises;

-- Verificar que se puede insertar con la estructura enviada
INSERT INTO exercises (id, name, description, categoria, sportId) 
VALUES ('test_123', 'Test Exercise', null, 'calentamiento', 1);
```

### 8. RESPUESTA ESPERADA (√âXITO)
```json
HTTP 201 Created
{
  "id": "uuid-generado-por-backend"
}
```

### 9. RESPUESTA ACTUAL (ERROR)
```json
HTTP 400 Bad Request
{
  "error": "VALIDATION_ERROR",
  "message": "Detalles espec√≠ficos del error de validaci√≥n"
}
```

## üöÄ PASOS INMEDIATOS
1. **REVISAR LOGS** del Planning Service para identificar causa espec√≠fica
2. **VERIFICAR DTO** CrearRutinaDto coincida exactamente con estructura enviada
3. **ACTUALIZAR SCHEMA** de base de datos si faltan campos
4. **PROBAR ENDPOINT** manualmente con curl
5. **DESPLEGAR CAMBIOS** si la soluci√≥n ya existe pero no est√° en producci√≥n

## ‚ùó NOTA IMPORTANTE
El frontend est√° enviando la estructura correcta. El problema est√° 100% en el backend.
No se requieren cambios en el frontend Flutter.

## üìû CUANDO EST√â RESUELTO
Confirmar que POST /planning/v1/routines retorna 201 Created con la estructura JSON enviada por el frontend. 