===============================================================================
                    INSTRUCCIONES PARA BACKEND - CLAVE DEL GIMNASIO
                              SISTEMA CAPBOX - FRONTEND FLUTTER
===============================================================================

RESUMEN:
El frontend de Flutter necesita que el backend implemente endpoints específicos
para el sistema de clave del gimnasio y captura de datos de atletas.

===============================================================================
                              ENDPOINTS REQUERIDOS
===============================================================================

1. OBTENER CLAVE DEL GIMNASIO (PRIORIDAD ALTA)
===============================================================================

ENDPOINT: GET /gyms/my/key
MÉTODO: GET
URL COMPLETA: https://api.capbox.site/v1/gyms/my/key
AUTENTICACIÓN: Requerida (Bearer Token)
AUTORIZACIÓN: Solo usuarios con rol "entrenador"

RESPUESTA EXITOSA (200 OK):
{
  "claveGym": "ZIKAR-PALENQUE-2025"
}

RESPUESTAS DE ERROR:
- 401 Unauthorized: Token inválido o expirado
- 403 Forbidden: Usuario no es entrenador
- 404 Not Found: Entrenador no asociado a gimnasio

LÓGICA DEL ENDPOINT:
1. Verificar que el token es válido
2. Verificar que el usuario tiene rol "entrenador"
3. Obtener el gimnasio asociado al entrenador
4. Devolver la clave del gimnasio

PSEUDOCÓDIGO:
```
app.get('/gyms/my/key', authenticateToken, async (req, res) => {
  try {
    // Verificar rol de entrenador
    if (req.user.role !== 'entrenador') {
      return res.status(403).json({ 
        error: 'Solo los entrenadores pueden obtener la clave del gimnasio' 
      });
    }

    // Obtener gimnasio del entrenador
    const coach = await User.findById(req.user.id).populate('gimnasio');
    
    if (!coach || !coach.gimnasio) {
      return res.status(404).json({ 
        error: 'Entrenador no asociado a ningún gimnasio' 
      });
    }

    // Devolver clave
    res.json({
      claveGym: coach.gimnasio.clave
    });

  } catch (error) {
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});
```

===============================================================================

2. VALIDAR CLAVE DEL GIMNASIO (YA EXISTE - VERIFICAR)
===============================================================================

ENDPOINT: POST /gyms/validate-key
MÉTODO: POST
URL COMPLETA: https://api.capbox.site/v1/gyms/validate-key
AUTENTICACIÓN: No requerida (público)

PETICIÓN:
{
  "claveGym": "ZIKAR-PALENQUE-2025"
}

RESPUESTA EXITOSA (200 OK):
{
  "valid": true,
  "gymName": "Gimnasio Zikar Palenque"
}

RESPUESTA DE ERROR (400 Bad Request):
{
  "valid": false,
  "error": "Clave de gimnasio inválida"
}

===============================================================================

3. OBTENER ATLETAS PENDIENTES DE CAPTURA (PRIORIDAD MEDIA)
===============================================================================

ENDPOINT: GET /coaches/pending-captures
MÉTODO: GET
URL COMPLETA: https://api.capbox.site/v1/coaches/pending-captures
AUTENTICACIÓN: Requerida (Bearer Token)
AUTORIZACIÓN: Solo usuarios con rol "entrenador"

RESPUESTA EXITOSA (200 OK):
{
  "pendingAthletes": [
    {
      "id": 1,
      "nombre": "Juan Pérez",
      "email": "juan@example.com",
      "fechaRegistro": "2025-01-20T10:30:00Z",
      "estado": "pending_capture",
      "telefono": "9991234567"
    },
    {
      "id": 2,
      "nombre": "María García", 
      "email": "maria@example.com",
      "fechaRegistro": "2025-01-19T15:45:00Z",
      "estado": "pending_capture",
      "telefono": "9987654321"
    }
  ]
}

LÓGICA:
1. Verificar que el usuario es entrenador
2. Obtener el gimnasio del entrenador
3. Buscar atletas del mismo gimnasio con estado "pending_capture"
4. Devolver lista de atletas pendientes

===============================================================================

4. CAPTURAR DATOS DEL TUTOR (PRIORIDAD MEDIA)
===============================================================================

ENDPOINT: POST /athletes/{athleteId}/capture-tutor
MÉTODO: POST
URL COMPLETA: https://api.capbox.site/v1/athletes/{athleteId}/capture-tutor
AUTENTICACIÓN: Requerida (Bearer Token)
AUTORIZACIÓN: Solo usuarios con rol "entrenador"

PETICIÓN:
{
  "nombreTutor": "Carlos Pérez",
  "telefonoTutor": "9991234567",
  "relacionTutor": "Padre",
  "direccionTutor": "Calle 123, Col. Centro, Mérida, Yucatán",
  "emailTutor": "carlos.perez@email.com"
}

RESPUESTA EXITOSA (200 OK):
{
  "success": true,
  "message": "Datos del tutor capturados exitosamente"
}

LÓGICA:
1. Verificar que el entrenador tiene acceso al atleta
2. Validar que el atleta está en estado "pending_capture"
3. Guardar datos del tutor
4. Verificar si ya tiene datos físicos, si sí, cambiar estado a "complete"

===============================================================================

5. CAPTURAR DATOS FÍSICOS (PRIORIDAD MEDIA)
===============================================================================

ENDPOINT: POST /athletes/{athleteId}/capture-physical
MÉTODO: POST
URL COMPLETA: https://api.capbox.site/v1/athletes/{athleteId}/capture-physical
AUTENTICACIÓN: Requerida (Bearer Token)
AUTORIZACIÓN: Solo usuarios con rol "entrenador"

PETICIÓN:
{
  "peso": 70.5,
  "estatura": 175,
  "nivel": "principiante",
  "guardia": "orthodox",
  "condicionesMedicas": "Ninguna",
  "objetivos": "Mejorar condición física y técnica"
}

RESPUESTA EXITOSA (200 OK):
{
  "success": true,
  "message": "Datos físicos capturados exitosamente"
}

LÓGICA:
1. Verificar que el entrenador tiene acceso al atleta
2. Validar que el atleta está en estado "pending_capture"
3. Guardar datos físicos
4. Verificar si ya tiene datos del tutor, si sí, cambiar estado a "complete"

===============================================================================

6. OBTENER ESTADO DEL ATLETA (PRIORIDAD BAJA)
===============================================================================

ENDPOINT: GET /athletes/my/status
MÉTODO: GET
URL COMPLETA: https://api.capbox.site/v1/athletes/my/status
AUTENTICACIÓN: Requerida (Bearer Token)
AUTORIZACIÓN: Solo usuarios con rol "atleta"

RESPUESTA EXITOSA (200 OK):
{
  "status": "pending_capture",
  "hasPhysicalData": false,
  "hasTutorData": false,
  "registrationDate": "2025-01-20T10:30:00Z"
}

POSIBLES ESTADOS:
- "pending_capture": Esperando captura de datos
- "complete": Registro completo, puede usar la app

===============================================================================
                            ESTRUCTURA DE BASE DE DATOS
===============================================================================

TABLA: gyms
===============================================================================
CREATE TABLE gyms (
  id SERIAL PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  clave VARCHAR(50) UNIQUE NOT NULL,  -- Ej: "ZIKAR-PALENQUE-2025"
  ubicacion VARCHAR(200),
  activo BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

DATOS DE EJEMPLO:
INSERT INTO gyms (nombre, clave, ubicacion) VALUES
('Gimnasio Zikar Palenque', 'ZIKAR-PALENQUE-2025', 'Palenque, Chiapas');

===============================================================================

TABLA: users (MODIFICAR)
===============================================================================
-- Agregar columnas necesarias:
ALTER TABLE users ADD COLUMN gym_id INTEGER REFERENCES gyms(id);
ALTER TABLE users ADD COLUMN status VARCHAR(20) DEFAULT 'pending_capture';

-- Para atletas: status puede ser 'pending_capture' o 'complete'
-- Para entrenadores: status siempre 'complete'

===============================================================================

TABLA: athlete_physical_data (NUEVA)
===============================================================================
CREATE TABLE athlete_physical_data (
  id SERIAL PRIMARY KEY,
  athlete_id INTEGER REFERENCES users(id),
  peso DECIMAL(5,2),
  estatura INTEGER,
  nivel VARCHAR(20),  -- 'principiante', 'intermedio', 'avanzado'
  guardia VARCHAR(20), -- 'orthodox', 'southpaw', 'switcher'
  condiciones_medicas TEXT,
  objetivos TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

===============================================================================

TABLA: athlete_tutor_data (NUEVA)
===============================================================================
CREATE TABLE athlete_tutor_data (
  id SERIAL PRIMARY KEY,
  athlete_id INTEGER REFERENCES users(id),
  nombre_tutor VARCHAR(100),
  telefono_tutor VARCHAR(20),
  relacion_tutor VARCHAR(50), -- 'Padre', 'Madre', 'Tutor', etc.
  direccion_tutor TEXT,
  email_tutor VARCHAR(100),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

===============================================================================
                                FLUJO COMPLETO
===============================================================================

1. ENTRENADOR OBTIENE CLAVE:
   GET /gyms/my/key → Muestra "ZIKAR-PALENQUE-2025"

2. ENTRENADOR COMPARTE CLAVE:
   Frontend permite copiar/compartir la clave

3. ATLETA SE REGISTRA:
   POST /auth/register con claveGym
   Backend valida la clave usando /gyms/validate-key

4. ATLETA QUEDA EN ESTADO "pending_capture":
   status = "pending_capture" en la tabla users

5. ENTRENADOR VE ALERTA:
   GET /coaches/pending-captures muestra atletas pendientes

6. ENTRENADOR CAPTURA DATOS:
   POST /athletes/{id}/capture-tutor
   POST /athletes/{id}/capture-physical

7. ATLETA PASA A "complete":
   Cuando tiene ambos datos, status = "complete"

8. ATLETA ACCEDE A LA APP COMPLETA:
   GET /athletes/my/status → "complete"

===============================================================================
                              IMPLEMENTACIÓN SUGERIDA
===============================================================================

FASE 1 (INMEDIATA):
- Implementar GET /gyms/my/key
- Verificar POST /gyms/validate-key funciona

FASE 2 (DESPUÉS):
- Crear tablas de datos físicos y tutor
- Implementar endpoints de captura
- Implementar lista de pendientes

FASE 3 (FINAL):
- Implementar estado del atleta
- Integrar home condicional

===============================================================================
                                    NOTAS
===============================================================================

1. SEGURIDAD:
   - Todos los endpoints protegidos deben validar el token JWT
   - Verificar que el entrenador solo accede a atletas de su gimnasio
   - Validar que el atleta solo accede a sus propios datos

2. VALIDACIONES:
   - Clave del gimnasio debe ser única y válida
   - Datos del tutor deben ser completos
   - Datos físicos deben tener formato correcto

3. LOGS:
   - Registrar todas las capturas de datos para auditoría
   - Log de intentos de registro con claves inválidas

4. PERFORMANCE:
   - Cachear claves de gimnasio si es necesario
   - Indexar por gym_id para consultas rápidas

===============================================================================
                                  TESTING
===============================================================================

ENDPOINTS PARA PROBAR:

1. Obtener clave como entrenador:
   GET /gyms/my/key
   Authorization: Bearer {token_entrenador}

2. Validar clave:
   POST /gyms/validate-key
   {"claveGym": "ZIKAR-PALENQUE-2025"}

3. Registro de atleta con clave:
   POST /auth/register
   {
     "email": "test@example.com",
     "password": "123456",
     "nombre": "Test User",
     "rol": "atleta", 
     "claveGym": "ZIKAR-PALENQUE-2025"
   }

===============================================================================
                                  CONTACTO
===============================================================================

Para dudas sobre la implementación del frontend o aclaraciones sobre
los endpoints, contactar al desarrollador de Flutter.

Última actualización: Enero 2025
=============================================================================== 